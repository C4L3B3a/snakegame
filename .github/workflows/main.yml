# ==========================================================
# SnakeGame Developer Kit - Universal Build Workflow
# ----------------------------------------------------------
# This workflow builds SnakeGame for multiple platforms:
#   - Windows (x64, x86) using PyInstaller
#   - macOS (x64, ARM64) using PyInstaller
#   - Linux (.deb, .rpm, .tar.gz, ARM64)
# Optional packages:
#   - Snap (manual publishing)
#   - Flatpak (manual publishing)
#
# Notes:
#   - Windows x86 requires Python x86 installed on the runner.
#   - macOS builds require GitHub-hosted Mac runners.
#   - Linux ARM builds require ARM runners or cross-compilation.
# ==========================================================

name: SnakeGame Universal Builder

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:

# ==========================================================
# WINDOWS BUILDS
# ==========================================================
jobs:
  build-windows:
    name: Build Windows (${{ matrix.arch }})
    runs-on: windows-latest
    strategy:
      matrix:
        arch: [ "x64", "x86" ]  # Build for 64-bit and 32-bit Windows

    steps:
      # Checkout the repo
      - uses: actions/checkout@v4

      # Setup Python
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
          architecture: ${{ matrix.arch }}

      # Install dependencies
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pyinstaller

      # Build the Windows executable using PyInstaller
      - name: Build Executable
        run: pyinstaller --onefile --windowed snakegame.py --name SnakeGame_${{ matrix.arch }}

      # Upload the built executable as artifact
      - name: Upload Executable
        uses: actions/upload-artifact@v4
        with:
          name: snakegame-windows-${{ matrix.arch }}
          path: dist/SnakeGame_${{ matrix.arch }}.exe

# ==========================================================
# macOS BUILDS
# ==========================================================
  build-macos:
    name: Build macOS (${{ matrix.arch }})
    runs-on: macos-latest
    strategy:
      matrix:
        arch: [ "x64", "arm64" ]  # Intel & Apple Silicon

    steps:
      - uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pyinstaller

      - name: Build macOS Executable
        run: pyinstaller --onefile --windowed snakegame.py --name SnakeGame_mac_${{ matrix.arch }}

      - name: Upload Executable
        uses: actions/upload-artifact@v4
        with:
          name: snakegame-macos-${{ matrix.arch }}
          path: dist/SnakeGame_mac_${{ matrix.arch }}

# ==========================================================
# LINUX BUILDS
# ==========================================================
  build-linux:
    name: Build Linux Packages
    runs-on: ubuntu-latest
    strategy:
      matrix:
        arch: [ "x86_64", "arm64" ]  # Build for x86_64 and ARM64 Linux

    steps:
      - uses: actions/checkout@v4

      # Setup environment and dependencies
      - name: Setup environment
        run: |
          sudo apt update
          sudo apt install -y python3 python3-setuptools python3-all fakeroot dpkg-dev rpm tar
          python3 -m pip install --upgrade pip
          pip install -r requirements.txt

      # -----------------------------
      # Build .deb package
      # -----------------------------
      - name: Build .deb package
        run: |
          mkdir -p build/usr/local/bin
          # Copy existing Python file from repo
          cp snakegame.py build/usr/local/bin/snakegame
          chmod +x build/usr/local/bin/snakegame
          # Build .deb using existing structure
          dpkg-deb --build build snakegame_1.0.0_${{ matrix.arch }}.deb

      # -----------------------------
      # Build .rpm package
      # -----------------------------
      - name: Build .rpm package
        run: |
          mkdir -p rpm/BUILD rpm/RPMS rpm/SOURCES rpm/SPECS rpm/SRPMS
          mkdir -p rpm/SOURCES/snakegame-1.0.0
          # Copy existing Python file only (support portal excluded)
          cp snakegame.py rpm/SOURCES/snakegame-1.0.0/
          # Create tarball source for rpmbuild
          tar czvf rpm/SOURCES/snakegame-1.0.0.tar.gz -C rpm/SOURCES snakegame-1.0.0
          # Use spec file already present in repo
          rpmbuild --define "_topdir $(pwd)/rpm" -bb rpm/SPECS/snakegame.spec

      # -----------------------------
      # Build .tar.gz archive
      # -----------------------------
      - name: Build .tar.gz archive
        run: |
          mkdir -p tarball/snakegame
          cp snakegame.py tarball/snakegame/
          tar czf snakegame_1.0.0_${{ matrix.arch }}.tar.gz -C tarball snakegame

      # -----------------------------
      # Upload Linux artifacts
      # -----------------------------
      - name: Upload Linux artifacts
        uses: actions/upload-artifact@v4
        with:
          name: snakegame-linux-${{ matrix.arch }}
          path: |
            snakegame_1.0.0_${{ matrix.arch }}.deb
            rpm/RPMS/noarch/*.rpm
            snakegame_1.0.0_${{ matrix.arch }}.tar.gz

# ==========================================================
# Snap build (optional)
# ==========================================================
  build-snap:
    name: Build Snap package
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Install Snapcraft
        run: sudo snap install snapcraft --classic

      # Build snap from repo root
      - name: Build Snap
        run: snapcraft pack --directory=.

      - uses: actions/upload-artifact@v4
        with:
          name: snakegame-snap
          path: ./*.snap

# ==========================================================
# Flatpak build (optional)
# ==========================================================
  build-flatpak:
    name: Build Flatpak package
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Install Flatpak tools
        run: sudo apt install -y flatpak flatpak-builder

      # Build flatpak using existing YAML file
      - name: Build Flatpak
        run: |
          flatpak-builder --force-clean build-dir snakegame.flatpak.yaml
          flatpak build-bundle repo snakegame.flatpak com.c4l.SnakeGame 1.0.0

      - uses: actions/upload-artifact@v4
        with:
          name: snakegame-flatpak
          path: snakegame.flatpak

# By C4L
